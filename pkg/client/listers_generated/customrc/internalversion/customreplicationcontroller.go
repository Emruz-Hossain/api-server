/*
  Copyright 2017 The Kubernetes Authors.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/
// This file was automatically generated by lister-gen

package internalversion

import (
	customrc "api-server/pkg/apis/customrc"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CustomReplicationControllerLister helps list CustomReplicationControllers.
type CustomReplicationControllerLister interface {
	// List lists all CustomReplicationControllers in the indexer.
	List(selector labels.Selector) (ret []*customrc.CustomReplicationController, err error)
	// CustomReplicationControllers returns an object that can list and get CustomReplicationControllers.
	CustomReplicationControllers(namespace string) CustomReplicationControllerNamespaceLister
	CustomReplicationControllerListerExpansion
}

// customReplicationControllerLister implements the CustomReplicationControllerLister interface.
type customReplicationControllerLister struct {
	indexer cache.Indexer
}

// NewCustomReplicationControllerLister returns a new CustomReplicationControllerLister.
func NewCustomReplicationControllerLister(indexer cache.Indexer) CustomReplicationControllerLister {
	return &customReplicationControllerLister{indexer: indexer}
}

// List lists all CustomReplicationControllers in the indexer.
func (s *customReplicationControllerLister) List(selector labels.Selector) (ret []*customrc.CustomReplicationController, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*customrc.CustomReplicationController))
	})
	return ret, err
}

// CustomReplicationControllers returns an object that can list and get CustomReplicationControllers.
func (s *customReplicationControllerLister) CustomReplicationControllers(namespace string) CustomReplicationControllerNamespaceLister {
	return customReplicationControllerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CustomReplicationControllerNamespaceLister helps list and get CustomReplicationControllers.
type CustomReplicationControllerNamespaceLister interface {
	// List lists all CustomReplicationControllers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*customrc.CustomReplicationController, err error)
	// Get retrieves the CustomReplicationController from the indexer for a given namespace and name.
	Get(name string) (*customrc.CustomReplicationController, error)
	CustomReplicationControllerNamespaceListerExpansion
}

// customReplicationControllerNamespaceLister implements the CustomReplicationControllerNamespaceLister
// interface.
type customReplicationControllerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CustomReplicationControllers in the indexer for a given namespace.
func (s customReplicationControllerNamespaceLister) List(selector labels.Selector) (ret []*customrc.CustomReplicationController, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*customrc.CustomReplicationController))
	})
	return ret, err
}

// Get retrieves the CustomReplicationController from the indexer for a given namespace and name.
func (s customReplicationControllerNamespaceLister) Get(name string) (*customrc.CustomReplicationController, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(customrc.Resource("customreplicationcontroller"), name)
	}
	return obj.(*customrc.CustomReplicationController), nil
}
